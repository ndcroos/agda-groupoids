{-# OPTIONS --without-K #-}

module Groupoids.Ordinary.Groupoid.Free where

open import Groupoids.Basis
open import Groupoids.Ordinary.Ambient.Universe.Boot
open import Prelude.Natural

module Free {n} (A : ๐ n 1 lzero) where

  infixl 1 _โธ_
  infixl 5 _++_

  data Path (ฯ : โ [ A ]) : (ฯ : โ [ A ]) โ Set where
    []
      : Path ฯ ฯ
    _โธ_
      : โ {ฯโ ฯโ}
      โ (ฯ : Path ฯ ฯโ)
      โ (f : โ (โ [ A ] ฯโ ฯโ))
      โ Path ฯ ฯโ

  _++_
    : โ {ฯ ฯโ ฯโ}
    โ Path ฯ ฯโ
    โ Path ฯโ ฯโ
    โ Path ฯ ฯโ
  ฯโ ++ []  = ฯโ
  ฯโ ++ (ฯโ โธ f) = (ฯโ ++ ฯโ) โธ f

  path-โขidnโ-ฮป
    : โ {ฯ ฯ}
    โ {ฯ : Path ฯ ฯ}
    โ [] ++ ฯ T.โก ฯ
  path-โขidnโ-ฮป {ฯ = []} = T.โก.idn
  path-โขidnโ-ฮป {ฯ = ฯ โธ f} = T.โก.apยน (ฮป x โ x โธ f) path-โขidnโ-ฮป

  path-โขidnโ-ฯ
    : โ {ฯ ฯ}
    โ {ฯ : Path ฯ ฯ}
    โ ฯ ++ [] T.โก ฯ
  path-โขidnโ-ฯ = T.โก.idn

  path-โขseqโ-ฮฑ
    : โ {ฯ ฯโ ฯโ ฯโ}
    โ {ฯโ : Path ฯ  ฯโ}
    โ {ฯโ : Path ฯโ ฯโ}
    โ {ฯโ : Path ฯโ ฯโ}
    โ ฯโ ++ (ฯโ ++ ฯโ) T.โก (ฯโ ++ ฯโ) ++ ฯโ
  path-โขseqโ-ฮฑ {ฯโ = []} = T.โก.idn
  path-โขseqโ-ฮฑ {ฯโ = ฯโ โธ f} = T.โก.apยน (ฮป x โ x โธ f) (path-โขseqโ-ฮฑ {ฯโ = ฯโ})

  Free : ๐ n 1 lzero
  โ [ Free ] = โ [ A ]
  โ (โ [ Free ] x y) = Path x y
  โ (โ [ Free ] x y) ฯโ ฯโ = ๐.โผ[ ฯโ T.โก ฯโ ]
  idnโ Free = []
  seqโ Free = _++_
  invโ Free f {โ = ()}
  seqโ* Free T.refl T.refl = T.โก.idn
  invโ* Free ฮฑ {โ = ()}
  โขidnโ-ฮป Free = path-โขidnโ-ฮป
  โขidnโ-ฯ Free = path-โขidnโ-ฯ
  โขseqโ-ฮฑ Free {f = ฯโ}{ฯโ}{ฯโ} = path-โขseqโ-ฮฑ {ฯโ = ฯโ}{ฯโ}{ฯโ}
  โขinvโ-ฮป Free {โ = ()}
  โขinvโ-ฯ Free {โ = ()}
  idnโ Free = T.โก.idn
  seqโ Free T.โก.idn T.โก.idn = T.โก.idn
  invโ Free T.โก.idn = T.โก.idn
